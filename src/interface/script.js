// Theme
const html = document.documentElement;
const themeToggle = document.getElementById('themeToggle');
const themeIcon = document.getElementById('themeIcon');
function setTheme(mode){
    html.setAttribute('data-theme', mode);
    themeIcon.textContent = mode === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    themeToggle.querySelector('.btn-text').textContent = mode === 'dark' ? 'Light' : 'Dark';
    localStorage.setItem('theme', mode);
}
setTheme(localStorage.getItem('theme') || 'dark');
themeToggle.addEventListener('click', ()=>{
    setTheme(html.getAttribute('data-theme') === 'dark' ? 'light' : 'dark');
});

// Elements
const messagesEl = document.getElementById('messages');
const inputEl = document.getElementById('input');
const sendBtn = document.getElementById('sendBtn');
const clearBtn = document.getElementById('clearChat');
const endEl = document.getElementById('end');
const spinner = document.getElementById('spinner');
const hintText = document.getElementById('hintText');

// Templates
const tplAssistant = document.getElementById('tpl-assistant');
const tplUser = document.getElementById('tpl-user');

// State
const messages = [];

// Utilities
function scrollToBottom(){ endEl.scrollIntoView({ behavior: 'smooth', block: 'end' }); }
function elFromTemplate(tpl){ return tpl.content.firstElementChild.cloneNode(true); }
function addMessage(role, content){
    const tpl = role === 'assistant' ? tplAssistant : tplUser;
    const node = elFromTemplate(tpl);
    node.querySelector('.content').innerHTML = renderMarkdownLite(content);
    messagesEl.appendChild(node);
    messages.push({ role, content });
    scrollToBottom();
}
function setLoading(loading){
    if(loading){ spinner.classList.remove('hidden'); hintText.textContent = 'ƒêang t·∫°o c√¢u tr·∫£ l·ªùi...'; }
    else { spinner.classList.add('hidden'); hintText.textContent = 'Tip: H·ªèi v·ªÅ s·∫£n ph·∫©m, so s√°nh, ho·∫∑c ti·∫øp n·ªëi cu·ªôc h·ªôi tho·∫°i.'; }
}
function renderMarkdownLite(text){
    // very light markdown support: **bold**, *italic*, `code`
    return text
    .replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    .replace(/\n/g, '<br/>');
}

// Fake backend (replace with your API)
async function sendMessageToBackend(prompt){
    // G·ª≠i c√¢u h·ªèi t·ªõi backend FastAPI v√† nh·∫≠n ph·∫£n h·ªìi th·ª±c
    try {
        const response = await fetch("http://localhost:8000/chat", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ query: prompt })
        });
        if (!response.ok) {
            throw new Error("Backend error");
        }
        const data = await response.json();
        return data.response;
    } catch (err) {
        return "‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra backend.";
    }
}

function streamText(text, onChunk){
    let i = 0;
    const step = Math.max(1, Math.floor(text.length/80));
    const id = setInterval(()=>{
    i += step;
    onChunk(text.slice(0, i));
    if(i >= text.length){ clearInterval(id); onChunk(text); }
    }, 16);
    return ()=> clearInterval(id);
}

async function handleSend(){
    const val = inputEl.value.trim();
    if(!val) return;
    addMessage('user', val);
    inputEl.value = '';
    setLoading(true);

    // Placeholder assistant bubble to stream into
    const node = elFromTemplate(tplAssistant);
    const contentEl = node.querySelector('.content');
    contentEl.textContent = '';
    messagesEl.appendChild(node);
    scrollToBottom();

    try {
        const full = await sendMessageToBackend(val, messages);
        contentEl.innerHTML = renderMarkdownLite(full);
        scrollToBottom();
        setLoading(false);
        messages.push({ role: 'assistant', content: full });
    } catch (err) {
        contentEl.textContent = '‚ö†Ô∏è ƒê√£ c√≥ l·ªói khi g·ªçi API. Vui l√≤ng th·ª≠ l·∫°i.';
        setLoading(false);
    }
}

// Events
sendBtn.addEventListener('click', handleSend);
inputEl.addEventListener('keydown', (e)=>{
    if(e.key === 'Enter' && !e.shiftKey){ e.preventDefault(); handleSend(); }
});
clearBtn.addEventListener('click', ()=>{
    messagesEl.innerHTML = '';
    messages.length = 0;
    addMessage('assistant', 'ƒê√£ t·∫°o h·ªôi tho·∫°i m·ªõi. H√£y cho m√¨nh bi·∫øt b·∫°n quan t√¢m s·∫£n ph·∫©m n√†o ‚ú®');
});

// Init
addMessage('assistant', 'Ch√†o b·∫°n üëã M√¨nh l√† tr·ª£ l√Ω t∆∞ v·∫•n s·∫£n ph·∫©m. H√£y ƒë·∫∑t c√¢u h·ªèi v·ªÅ c√°c thi·∫øt b·ªã ƒëi·ªán t·ª≠/ƒë·ªì th√¥ng minh nh√©!');




