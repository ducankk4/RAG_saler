// DOM Elements
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');
const typingIndicator = document.getElementById('typingIndicator');
const quickActions = document.getElementById('quickActions');

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    initializeChatbot();
    setupEventListeners();
    setWelcomeTime();
    checkApiConnection();
});

// Check API connection on startup
async function checkApiConnection() {
    try {
        const response = await fetch('/api/status');
        if (response.ok) {
            console.log('‚úÖ API Connected Successfully');
        } else {
            console.warn('‚ö†Ô∏è API Connection Warning:', response.status);
        }
    } catch (error) {
        console.error('‚ùå API Connection Failed:', error);
        // Add notification to user
        setTimeout(() => {
            addBotMessage('‚ö†Ô∏è K·∫øt n·ªëi API kh√¥ng ·ªïn ƒë·ªãnh. M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø.', true);
        }, 1000);
    }
}

function initializeChatbot() {
    // Auto-resize textarea
    autoResizeTextarea(messageInput);
    
    // Focus on input
    messageInput.focus();
    
    // Setup quick action buttons
    setupQuickActions();
}

function setupEventListeners() {
    // Send button click
    sendButton.addEventListener('click', handleSendMessage);
    
    // Enter key to send message
    messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    });
    
    // Input change to toggle send button
    messageInput.addEventListener('input', function() {
        const isEmpty = this.value.trim() === '';
        sendButton.disabled = isEmpty;
        
        // Auto resize
        autoResizeTextarea(this);
    });
    
    // Hide quick actions when user starts typing
    messageInput.addEventListener('focus', function() {
        if (chatMessages.children.length === 1) { // Only welcome message
            quickActions.style.display = 'block';
        }
    });
}

function setupQuickActions() {
    const quickButtons = document.querySelectorAll('.quick-btn');
    quickButtons.forEach(button => {
        button.addEventListener('click', function() {
            const question = this.getAttribute('data-question');
            messageInput.value = question;
            messageInput.focus();
            sendButton.disabled = false;
            
            // Auto send the question
            setTimeout(() => {
                handleSendMessage();
            }, 300);
        });
    });
}

function setWelcomeTime() {
    const welcomeTimeElement = document.getElementById('welcomeTime');
    if (welcomeTimeElement) {
        welcomeTimeElement.textContent = formatTime(new Date());
    }
}

async function handleSendMessage() {
    const message = messageInput.value.trim();
    if (message === '') return;
    
    console.log('üîµ Sending message:', message);
    
    // Hide quick actions after first message
    if (chatMessages.children.length === 1) {
        quickActions.style.display = 'none';
    }
    
    // Add user message
    addUserMessage(message);
    
    // Clear input
    messageInput.value = '';
    sendButton.disabled = true;
    autoResizeTextarea(messageInput);
    
    // Show typing indicator
    showTypingIndicator();
    
    try {
        // Send message to backend
        console.log('üì§ Calling sendMessageToBackend...');
        const response = await sendMessageToBackend(message);
        console.log('üì• Received response:', response);
        
        // Hide typing indicator
        hideTypingIndicator();
        
        // Add bot response
        addBotMessage(response);
        
    } catch (error) {
        console.error('‚ùå Error in handleSendMessage:', error);
        hideTypingIndicator();
        
        // More specific error message
        let errorMessage = 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. ';
        if (error.message.includes('Failed to fetch')) {
            errorMessage += 'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.';
        } else if (error.message.includes('404')) {
            errorMessage += 'API endpoint kh√¥ng t·ªìn t·∫°i.';
        } else if (error.message.includes('500')) {
            errorMessage += 'L·ªói server n·ªôi b·ªô.';
        } else {
            errorMessage += 'Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
        
        addBotMessage(errorMessage, true);
    }
    
    // Focus back to input
    messageInput.focus();
}

function addUserMessage(message) {
    const messageDiv = createMessageElement(message, 'user');
    chatMessages.appendChild(messageDiv);
    scrollToBottom();
}

function addBotMessage(message, isError = false) {
    const messageDiv = createMessageElement(message, 'bot', isError);
    chatMessages.appendChild(messageDiv);
    scrollToBottom();
}

function createMessageElement(message, sender, isError = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}-message`;
    
    const currentTime = formatTime(new Date());
    
    const avatarIcon = sender === 'user' ? 'fas fa-user' : 'fas fa-robot';
    const errorClass = isError ? ' error' : '';
    
    // Format message content to preserve line breaks
    const formattedMessage = formatMessageContent(message);
    
    messageDiv.innerHTML = `
        <div class="message-avatar">
            <i class="${avatarIcon}"></i>
        </div>
        <div class="message-content${errorClass}">
            <div class="message-text">${formattedMessage}</div>
        </div>
        <div class="message-time">
            <span>${currentTime}</span>
        </div>
    `;
    
    return messageDiv;
}

function showTypingIndicator() {
    typingIndicator.style.display = 'flex';
    scrollToBottom();
}

function hideTypingIndicator() {
    typingIndicator.style.display = 'none';
}

function scrollToBottom() {
    setTimeout(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 100);
}

function autoResizeTextarea(textarea) {
    textarea.style.height = 'auto';
    const newHeight = Math.min(textarea.scrollHeight, 120);
    textarea.style.height = newHeight + 'px';
}

function formatTime(date) {
    return date.toLocaleTimeString('vi-VN', { 
        hour: '2-digit', 
        minute: '2-digit'
    });
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function formatMessageContent(text) {
    // Escape HTML first for security
    const escapedText = escapeHtml(text);
    // Replace line breaks with <br> tags to preserve formatting
    return escapedText.replace(/\n/g, '<br>');
}

// Backend API Communication
async function sendMessageToBackend(message) {
    console.log('üåê Starting API call to /chat');
    
    try {
        const requestBody = {
            message: message,
            timestamp: new Date().toISOString()
        };
        
        console.log('üì§ Request body:', requestBody);
        
        const response = await fetch('/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        });
        
        console.log('üì° Response status:', response.status);
        console.log('üì° Response ok:', response.ok);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Response error text:', errorText);
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ Response data:', data);
        
        return data.reply || 'T√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y.';
        
    } catch (error) {
        console.error('‚ùå Backend communication error:', error);
        
        // Check if it's a network error
        if (error.message.includes('Failed to fetch') || error.name === 'TypeError') {
            console.log('üîÑ Network error detected, using fallback response');
            return generateFallbackResponse(message);
        }
        
        // Re-throw the error to be handled by handleSendMessage
        throw error;
    }
}

// Fallback response for testing (remove when backend is connected)
function generateFallbackResponse(message) {
    const responses = [
        'C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! ƒê√¢y l√† ph·∫£n h·ªìi m·∫´u t·ª´ chatbot.',
        'T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi c·ªßa b·∫°n. T√≠nh nƒÉng n√†y ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.',
        'R·∫•t ti·∫øc, t√¥i ch∆∞a th·ªÉ k·∫øt n·ªëi v·ªõi h·ªá th·ªëng backend. Vui l√≤ng th·ª≠ l·∫°i sau.',
        'C√¢u h·ªèi c·ªßa b·∫°n r·∫•t th√∫ v·ªã! T√¥i s·∫Ω c·∫£i thi·ªán ƒë·ªÉ tr·∫£ l·ªùi t·ªët h∆°n.',
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
}

// Error handling
window.addEventListener('error', function(e) {
    console.error('Global error:', e.error);
});

// Handle offline/online status
window.addEventListener('online', function() {
    console.log('Connection restored');
});

window.addEventListener('offline', function() {
    console.log('Connection lost');
    addBotMessage('K·∫øt n·ªëi m·∫°ng b·ªã gi√°n ƒëo·∫°n. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.', true);
});

// Utility functions
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Export for testing
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        formatTime,
        escapeHtml,
        createMessageElement
    };
}